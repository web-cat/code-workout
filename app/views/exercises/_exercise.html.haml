- size ||= 'lg'
- start_workout ||= nil
- new_workout ||= nil
- user ||= current_user || User.find_by(id: session[:student_drift_user_id])
- review ||= false

- if params[:review_user_id]
  - user = User.find(params[:review_user_id])
- workout_offering ||= nil
- workout ||= workout_offering.andand.workout
- if workout
  - workout_id ||= workout
- else
  - workout_id ||= params[:workout_id]
  - workout ||= workout_id ? Workout.find_by(id: workout_id) : nil
- if workout_offering
  - workout_score ||= workout_offering.score_for(user)
- else
  - workout_score ||= workout && user && workout.score_for(user, nil)

- pts = workout ? workout.exercise_workouts.where(exercise: exercise).first.andand.points : nil
- is_parsons = exercise.name.downcase.include?('parsons')
- if is_parsons
  - attempt = exercise.latest_parsons_attempt_for(exercise.external_id,user)
  - score = attempt ? attempt.score : 0
- else
  - attempt = workout_score ? workout_score.scoring_attempt_for(exercise) : exercise.latest_attempt_for(user)
  - score = attempt ? attempt.score : 0
- if !pts
  - pts = exercise.experience
  - score = score * pts # exercise scores are automatically 0--1 weighted
- if !pts || pts == 0
  - score_pct = 0
- else
  - score_pct = (score / pts * 100).round(0).to_i
- if score.round(2) < pts
  - score = score.round(2)
  - if score >= pts
    - score -= 1
- else
  - score = score.round(2)
-#

- cache [exercise, exercise.current_version, workout, workout_offering, new_workout, start_workout,
  score, pts, size, review, workout_score] do
  %article.exercise.thumbnail{ class: size }
    .title
      - if exercise.is_mcq?
        %i.glyphicon.glyphicon-th-list
      - elsif exercise.is_coding?
        %span.fa-stack
          %i.fa.fa-square.fa-stack-2x
          %i.fa.fa-terminal.fa-stack-1x.fa-inverse
      - else
        %i.fa-pencil-square-o
      - if workout_offering
        - if workout_offering.can_be_seen_by?(user) || current_user.global_role.is_admin? || workout_offering.course_offering.is_manager?(current_user)
          - if start_workout
            = link_to exercise.display_name,
              organization_workout_offering_practice_path(exercise_id: exercise.id,
                organization_id: workout_offering.course_offering.course.organization.slug,
                course_id: workout_offering.course_offering.course.slug,
                term_id: workout_offering.course_offering.term.slug,
                id: workout_offering.id,
                lti_launch: @lti_launch)
          - elsif review && Attempt.where(exercise_version: exercise.current_version, user: user).any?
            = link_to exercise.display_name,
              organization_workout_offering_exercise_review_path(id: exercise.id,
                organization_id: workout_offering.course_offering.course.organization.slug,
                course_id: workout_offering.course_offering.course.slug,
                term_id: workout_offering.course_offering.term.slug,
                review_user_id: user.id, workout_offering_id: workout_offering.id,
                lti_launch: @lti_launch)
          - elsif review
            = exercise.display_name
          - else
            = link_to exercise.display_name,
              organization_workout_offering_exercise_path(id: exercise.id,
                organization_id: workout_offering.course_offering.course.organization.slug,
                course_id: workout_offering.course_offering.course.slug,
                term_id: workout_offering.course_offering.term.slug,
                workout_offering_id: workout_offering.id,
                lti_launch: @lti_launch)
        - else
          = exercise.display_name
      - elsif workout
        = link_to(exercise.display_name,
          exercise_practice_path(exercise,
          workout_score_id: workout_score.andand.id,
          workout_id: workout.id, lti_launch: @lti_launch))
      - else
        - if exercise.display_name.downcase.include?('parsons')
          = link_to exercise.display_name, s0_exercise_path
        - else
          = link_to exercise.display_name, exercise_practice_path(exercise)

      - if [ 'show', 'index', 'search' ].include?(action_name) && (current_user.andand.can? :edit, exercise)
        .right= button_link 'Edit', edit_exercise_path(exercise), class: 'btn btn-primary btn-sm'

    - if !new_workout
      .summary
        - if !attempt || !workout_score || workout_score.show_score?
          .radial-progress{ 'data-progress' => score_pct }
            .circle
              .mask.full
                .fill
              .mask.half
                .fill
                .fill.fix
              .shadow
            .inset
              .score
                = score.to_s
                %span.outof>
                  = "/ "  + pts.to_s
        - else
          .radial-progress.masked
            .circle
              .shadow
            .inset
              .score= image_tag 'pct-blur.png'
    - else
      .summary
        .btn.btn-primary.add-ex{data: { ex_id: exercise.id, ex_name: exercise.name } }
          %i.fa.fa-arrow-right
    = exercise.current_version.image_processing(false)
    .body
      .text
        = teaser(exercise.current_version.andand.prompts.andand.first.andand.question)
    .info
      = difficulty_image(exercise.experience.to_i)
      .taglist
        - exercise.languages.each do |lang|
          = link_to lang.name, exercises_search_path(search: lang.name), class: 'tag lang'
        - exercise.tags.each do |tag|
          = link_to tag.name, exercises_search_path(search: tag.name), class: 'tag'
      -#
        - attempt = nil
        - uid = 0
        - if user_signed_in?
          - uid = current_user.id
        - attempt_pct = 0
        - ex_workout = nil
        - if uid && uid != 0
          - attempt = Attempt.where(user_id: uid,
            exercise_version: exercise.current_version).last
          - if attempt && attempt.score > 0
            - attempt_pct = 100
          - if workout_id
            - ex_workout = ExerciseWorkout.find_by(exercise_id: exercise.id,
              workout_id: workout_id)
            - if ex_workout && attempt
              - attempt_pct = number_to_percentage(attempt.score.round(2) / ex_workout.points)
        .pts
          - if attempt
            = n_to_s attempt.score.round(2)
            - plural = (attempt.score != 1)
            - if ex_workout
              = '/'
              = n_to_s ex_workout.points
              - plural = (ex_workout.points != 1)
            - if plural
              pts
            - else
              pt

          - elsif workout_id
            - ex_workout = ExerciseWorkout.find_by(exercise_id: exercise.id,
              workout_id: workout_id)
            = ex_workout.points
            - if ex_workout.points != 1
              pts
            - else
              pt
          - else
            = n_to_s(exercise.experience) + ' xp'
  -#
    .progress
      - att = Attempt.where(user_id: uid,
        exercise_version: exercise.current_version).last
      - ex_workout = nil
      - if workout_id
        - ex_workout = ExerciseWorkout.find_by(exercise_id: exercise.id, workout_id: workout_id)
      - if att && ex_workout
        - attemptp = attempt.score.round(2)
        .progress-bar{ role: 'progressbar',
          'aria-valuenow' => attempt_pct,
          'aria-valuemax' => 100,
          'aria-valuemin' => 0,
          style: 'width: ' + attempt_pct.to_s + '%;' }
          %progress{value: attemptp, max: ex_workout.points }
      - elsif ex_workout
        .progress-bar{ role: 'progressbar',
          'aria-valuenow' => 0,
          'aria-valuemax' => 100,
          'aria-valuemin' => 0,
          style: 'width: 0%;' }
          %progress{value: 0,max: ex_workout.points }
      - else
        %progress.progress-bar{ role: 'progressbar',
          'aria-valuenow' => 0,
          'aria-valuemax' => 100,
          'aria-valuemin' => 0,
          style: 'width: 0%;' ,
          value: 0,max: 100 }